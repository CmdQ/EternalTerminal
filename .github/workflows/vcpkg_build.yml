name: Vcpkg Build
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build_vcpkg:
    name: build-vcpkg-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      # Indicates the CMake build directory where project files and binaries are being produced.
      CMAKE_BUILD_DIR: ${{ github.workspace }}/build
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/external/vcpkg

    steps:
      - name: Install Dependencies (Linux)
        run: sudo apt-get update && sudo apt-get install curl zip unzip tar cmake ninja-build libutempter-dev libunwind-dev libcurl4-openssl-dev
        if: matrix.os == 'ubuntu-latest'
      - name: Install Dependencies (Windows)
        run: choco install ninja
        if: matrix.os == 'windows-latest'
      - name: Install Dependencies (macOS)
        run: brew install ninja cmake
        if: matrix.os == 'macos-latest'

      - uses: actions/checkout@v2
        with:
          submodules: recursive

      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly. As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1
      # Run CMake to generate Ninja project files, using the vcpkg's toolchain file to resolve and install the dependencies as specified in vcpkg.json.
      - name: Install dependencies and generate project files
        run: |
          cmake -S "${{ github.workspace }}" -B "${{ env.CMAKE_BUILD_DIR }}" -GNinja
      # Build the whole project with Ninja (which is spawn by CMake).
      - name: Build
        run: |
          cmake --build "${{ env.CMAKE_BUILD_DIR }}"
      
      - uses: actions/upload-artifact@v2
        with:
          name: et-client-${{matrix.os}}
          path: ${{ env.CMAKE_BUILD_DIR }}/et${{matrix.extension}}
